#!/usr/bin/env python3

import sys, os, subprocess, re, logging, curses
from pathlib import Path
from logging import debug, info, warning, error, critical
from argparse import ArgumentParser
from contextlib import chdir, contextmanager
from hashlib import md5

### default constants ###
INSTALL_METHOD="git"
GIT_ORIGIN="https://github.com/hazelmollusk/dot"
# GIT_PATTERN="\/dot(\.git)?\$"
GIT_PATTERN="dot"
LOG_LEVEL=logging.WARN
for arg in sys.argv:
  if re.search('--?[a-z]*v', arg):
    LOG_LEVEL=logging.DEBUG
CONFIG_PATH='~/.dotrc'
UI_ARG_COUNT = 1
PROGNAME='dotctl'

# executes `command` and returns output on success, or False on error
def command_output(command):
  debug(f'cmd: {str(command)}')
  if type(command) == str: command = command.split()
  result = subprocess.run(command,
                          stdout=subprocess.PIPE, 
                          stderr=subprocess.DEVNULL)
  return False if result.returncode else result.stdout.decode()


##### context wrapper for curses terminal settings ##
@contextmanager
def curses_screen():
    try:
      screen = curses.initscr()
      curses.curs_set(False)  #| no cursor            |#  
      curses.noecho()         #| silence keystrokes   |#
      curses.cbreak()         #| unbuffered input     |#
      screen.keypad(True)     #| handle special keys  |#
      yield screen
    finally:
      curses.curs_set(True) 
      curses.nocbreak()
      screen.keypad(False)
      curses.echo()
      curses.endwin()


########## helpful for debugging curses #######
def ouch(*args, **kwargs):
  raise RuntimeError(*[repr(arg) for arg in args], repr(kwargs))

################### file_hash ############### 
def file_hash(file):
  from hashlib import md5
  return md5(open(file, 'rb').read()).hexdigest()

############################## ColorFormatter #####
class ColorFormatter(logging.Formatter):

    grey = "\x1b[38;20m"
    yellow = "\x1b[33;20m"
    red = "\x1b[31;20m"
    indigo = "\x1b[34;20m"
    green = "\x1b[1;32;20m"
    bold_red = "\x1b[31;1m"
    reset = "\x1b[0m"
    format = "%(asctime)s - %(levelname)s - %(message)s"
    format_suffix = " (%(filename)s:%(lineno)d)"

    FORMATS = {
        logging.DEBUG: indigo + format + reset + grey + format_suffix + reset,
        logging.INFO: green + format + reset + grey + format_suffix + reset,
        logging.WARNING: yellow + format + reset + grey + format_suffix + reset,
        logging.ERROR: red + format + reset + grey + format_suffix + reset,
        logging.CRITICAL: bold_red + format + reset + grey + format_suffix + reset
    }

    def format(self, record):
        log_fmt = self.FORMATS.get(record.levelno)
        formatter = logging.Formatter(log_fmt)
        return formatter.format(record)

############################ Rooted ############
class Rooted:

  def __init__(self, path=None):
    if isinstance(path, str):
      path = Path(path)
    if isinstance(path, Path):
      self.path = path
    elif path is not None:
      raise RuntimeError(f'illegal path: {path}')

  @property
  def path(self): return self._path

  @path.setter
  def path(self, path):
    if isinstance(path, str):
      self._path = Path(path)
    elif isinstance(path, Path):
      self._path = path
    elif path is None:
      self._path = None
    else:
      raise RuntimeWarning('{type(self)}: cannot assign path to {type(path)}: {path}')

########################## Git(Rooted) ########
class Git(Rooted):

  @property
  def root(self):
    if self.path:
      p = self.path
      while p.parents:
        if (p / '.git' / 'config').exists():
          return p
        p = p.parent
    return None

  @property
  def remotes(self):
    ret = {}
    if self.root:
      with chdir(self.root):
        for line in command_output('git remote -v').splitlines():
          name, url = line.split()[0:2]
          ret[name] = url
    return ret

  def create(self, url=None, path=None):
    if path: self.path = path
    if not self.path:
      error('cannot create without path')
      raise RuntimeError
    debug(f'creating dir {self.path}')
    os.makedirs(self.path, exist_ok=True)
    with chdir(self.path):
      if not command_output(f'git {f"clone {url} {self.path}" if url else "init"}'):
        raise RuntimeError

  def update(self):
    if not self.root:
      raise RuntimeError('cannot update invalid repository!')
    with chdir(self.path):
      if not command_output(f'git pull --all'):
        raise RuntimeError

############################# Adapter ############
class Adapter:
  
  def __init__(self, dot):
    self.dot = dot

  @property
  def name(self): 
    raise NotImplementedError

  @property
  def links(self): 
    raise NotImplementedError

  def backup_file(self, filename):
    file = Path(filename).expanduser()
    if not file.exists(): 
      warning(f'backup: file {file} not found!')
      return True
    h = file_hash(file)
    bkf = Path(f'{filename}.bak.{h[0:8]}')
    if bkf.exists():
      warning(f'backup: backup file {bkf} already exists!')
      file.unlink()
      return bkf
    debug(f'backup: {filename} -> {bkf}')
    return file.rename(bkf)
  
  def install(self):
    debug(f'adapter({self.name}): installing')
    for link in self.links:
      self.install_link(link)

  def install_link(self, link):
    src = self.dot.path / 'res' / self.name / link
    dst = self.dot.path.home() / f'.{link}'
    if not src.exists():
      warning(f'install: link {self.name}/{link} not found!')
      return False
    if dst.exists():
      debug(f'install: destination link .{link} exists')
      if dst.samefile(src):
        debug(f'install: {self.name}/{link} already installed')
        return True
      bkup = self.backup_file(dst)
    info(f'install: linking {dst} to {src}')
    dst.symlink_to(src)
    
    
  # def install_link(self, src, dst):
  #   if realpath(src) == realpath(dst): return True

  # def install(self):
  #   for link in self.links():
  #     self.install_link(f'{self.dot.root}/{self.name}/{link}', expanduser(f'~/.{link}'))


######################## BashAdapter(Adapter) #######
class BashAdapter(Adapter):
  
  @property
  def name(self): return 'bash'
  
  @property
  def links(self): return ['bashrc','bash_profile','bash_aliases']


class Dot(Rooted):
    
  def __init__(self, params=None, path=None):
    self.params = params
    self.path = path

  def setup_logging(self, level=LOG_LEVEL):
    if not level: level = LOG_LEVEL
    logger = logging.getLogger()
    logger.setLevel(level)
    ch = logging.StreamHandler()
    ch.setLevel(level)
    ch.setFormatter(ColorFormatter())
    logger.addHandler(ch)

  def main(self):
    self.setup_logging(LOG_LEVEL)
    try:
      self.args = self.parse_args()
      self.config = self.load_config(self.args.config or CONFIG_PATH)
      self.path = self.detect_root()
      self.run() if ((len(sys.argv) < (3 if self.args.verbose else 2)) \
                     and not self.args.menu) else self.run_ui() 
    except Exception as e:
      critical('exception encountered, exiting..')
      if logging.getLogger().level == logging.DEBUG: 
        raise e
      else:
        warning(f'error: {str(e)}')

  @property
  def git(self):
    return Git(self.path)

  @property
  def home(self):
    return Path().home()

  @property
  def adapters(self):
    self.config.setdefault('adapters', [ a.name for a in Adapter.__subclasses__() ])
    if isinstance(self.config['adapters'], str):
      self.config['adapters'] = self.config['adapters'].split()
    # TODO: memoize?
    return [ cls(self) for cls in Adapter.__subclasses__() \
            if cls.name in self.config['adapters']]

  def detect_root(self):
    if self.args.root: 
      self.path = self.args.root
      return self.path
    run_path = Path('.')
    try: run_path = Path(__file__).parent
    except NameError: pass
    debug(f'detect: initial run path -> {run_path}')
    debug(f'detect: real run path -> {run_path.absolute()}')
    git = Git(run_path)
    if git.root:
      for name, url in git.remotes.items():
        debug(f'detect: remote {name} -> {url}')
        if re.search(GIT_PATTERN, url):
          info(f'detect: found at {git.root}')
          return git.root
    elif (run_path.parent / 'bin' / 'dotctl').exists():
      return run_path.parent
    else:
      info('no installation detected')
    return False
  
  def run(self):
    debug('running non-interactively')
    if self.args.install:
      self.install(self.path, True)
      for adapter in self.adapters:
        adapter.install()

  def install(self, path=None, create=False):
    if INSTALL_METHOD=='git':
      if path: self.path = path
      if not self.path: self.path = Path.home() / '.dot'
      debug(f'install: root -> {self.path}')
      if not self.git.root:
        if not create:
          warning('install: refusing to create new install!')
          raise RuntimeWarning('refusing to create new install!')
        info(f'install: not detected at {self.path}, cloning from {GIT_ORIGIN}')
        self.git.create(GIT_ORIGIN, self.path)
      else: 
        info(f'install: updating install at {self.path}')
        self.git.update()
    else:
      warning('install: invalid INSTALL_METHOD!')
      raise RuntimeWarning('invalid install method!')

  def load_config(self, filename=None):
    config_path = Path(filename or CONFIG_PATH).expanduser()
    config_vars = {}
    if config_path.exists():
      info(f'config: loading from file {config_path}')
      with open(config_path) as cfg:
        config_vars = dict([ line.split('=', 1) for line in cfg.readlines() ])
        for k, v in config_vars.items(): 
          debug(f'config: {k}={v}')
    return config_vars

  def parse_args(self, params=None):
    params = params or self.params or None
    epilog = command_output('ddate') or 'Install `ddate`!'
    parser = ArgumentParser(epilog=epilog)
    parser.add_argument('-i', '--install', action='store_true', 
                        help='install/update')
    parser.add_argument('-r', '--root', type=str, 
                        help='root install path')
    parser.add_argument('-v', '--verbose', action='store_true', 
                        help='show debugging output')
    parser.add_argument('-c', '--config', type=str,
                        help='config file location')
    parser.add_argument('-m', '--menu', action='store_true',
                        help='show menu interface')
    return parser.parse_args(params)
  
  def run_ui(self):
    curses.wrapper(DotUI(self).main())


class DotUI:
  def __init__(self, dot):
    self.dot = dot
    self.main_window = None
    self.windows = []

  def push_window(self, h, w):
    parent = self.windows[len(self.windows) - 1] \
      if self.windows else self.main_window
    lines, cols = parent.getmaxyx()
    w = min(lines - 2, w)
    h = min(cols - 2, h)
    z = self.layer * 3
    window = parent.subwin(h, w, z, z)
    self.windows.append(window)
    return window

  @property
  def layer(self):
    return len(self.windows)    

  def menu(self, options, title=None):
    width = max(len(title or '') - 2, *[len(label)+4 for label, func in options])
    height = 5 + len(options)
    # window = parent.subwin(height, width, self.layer * 3, self.layer * 3)
    window = self.push_window(height, width)
    window.border()
    if title: self.window_title(window, title)
    options_dict = dict(enumerate(options))
    for idx, (label, func) in options_dict.items():
      window.addstr(idx + 1, 3, f'{idx}. {label}')
    window.refresh()
    while True:
      key = window.getkey()

  def main(self):
    with curses_screen() as screen:
      screen.clear()
      self.main_window = curses.newwin(curses.LINES, curses.COLS)
      self.window_title(self.main_window, PROGNAME)
      self.menu((
        ('Install', lambda: self.dot.install()),
        ('Configure', lambda: self.configure()),
        ('Quit', lambda: self.quit()),
      ), PROGNAME)

  def quit(code=0):
    debug('byee..')
    sys.exit(code)

  def window_title(self, window, text):
    sy, sx = window.getparyx()
    if sy < 0: sy = 0
    if sx < 0: sx = 0
    lines, cols = window.getmaxyx()
    x = min(sx+2, int(cols/2 - len(text)/2) - sx)
    debug(f'window.addstr({sy}, {x}, {text[0:lines-sx-1]})')
    # raise RuntimeError((f'window.addstr({sy}, {x}, {text[0:lines-sx-1]})'))
    window.addstr(sy, sx+2, text[0:cols-sx-3])

if __name__ == '__main__': Dot().main()
